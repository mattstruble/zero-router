name: "OpenWRT Firmware Download"
description: "Queries OpenWRT Firmware Selector and generates the image"
inputs:
  version:
    description: "The openwrt version to generate"
    required: true
  firmware_id:
    description: "The id of the firmware to build"
    required: true
  firmware_target:
    description: "The target of the firmware"
    required: true
  packages:
    description: "Path to the custom packages.json to load"
    required: true
  files:
    description: "Path to the files directory containing the custom configurations"
    required: true
  outdir:
    description: "Path to output the images into"
    required: false
    default: "./"
outputs:
  image:
    description: "Path to the generated image file"
    value: ${{ steps.image.outputs.image_name }}

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v3

    - name: setup
      shell: bash
      run: |
        echo "openwrt_targets=https://downloads.openwrt.org/releases/${{ inputs.version }}/targets/${{ inputs.firmware_target }}/" >> $GITHUB_ENV

        mkdir -p ~/build/openwrt

        sudo apt update && sudo apt install build-essential libncurses-dev \
        zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3

    - name: Download Image Builder
      shell: bash
      run: |
        cd ~/build/openwrt && \
        wget -r -q --no-parent -nd -A '*imagebuilder*' ${{ env.openwrt_targets }} && \
        tar -J -x -f openwrt-imagebuilder-*.tar.xz && \
        rm -rf openwrt-imagebuilder-*.tar.xz

        cd ~/build/openwrt/openwrt-imagebuilder-*/ && \
        echo "openwrt_imagebuilder=$(pwd)" >> $GITHUB_ENV

    - name: Create packages
      shell: bash
      id: package
      env:
        package_file: ${{ inputs.packages }}
      run: echo "packages=$(cat $package_file | jq -c -r 'join(" ")')" >> $GITHUB_OUTPUT

    - name: Make image
      shell: bash
      run: |
        cd "${{env.openwrt_imagebuilder}}" && \
        make image \
        PROFILE="${{inputs.firmware_id}}" \
        PACKAGES="${{ steps.package.outputs.packages }}" \
        FILES="${{inputs.files}}/" \
        BIN_DIR="${{ inputs.outdir }}"

    - name: Select output image
      shell: bash
      id: image
      run: |
        echo "image_name=$(find ${{ inputs.outdir }} -type f -name '*ext4*factory*.img.gz')" >> $GITHUB_OUTPUT
